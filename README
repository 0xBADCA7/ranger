== Ranger v.1.0.0

Ranger is a filemanager that integrates well into the linux shell and
gives you a quick way of doing operations that would otherwise require
a lot of typing, without starting up a bloated environment.

The program is written in Python since version 1.0.0 and uses
ncurses for the user interface.

== About

* Author:          hut
* Email:           hut@lavabit.com
* Git repo:        http://repo.or.cz/w/ranger.git
* Version:         1.0.0


== Features

* Multi-column display
* Preview of the selected file/directory
* Common file operations (create/chmod/copy/delete/...)
* Quickly find files or text inside files
* VIM-like controls
* Open files in external programs
* Mouse support
* Change directory of shell after exit
* Bookmarks


== Dependencies

* A Unix-like OS        (ranger is not tested on others)
* Python 2.6 or 3.1
* Python curses module


== Getting Started

At first, it's a good idea to create a symlink in your bin dir:
    sudo ln -s /path/to/ranger.py /usr/bin/ranger

Now type in ranger to start it.

You should see 4 columns. The third is the directory where you are at
the moment. To the left, there are the the directories above the current
working dir, and the column on the right is a preview of the selected
file/directory.

Now use the arrow keys to navigate, press enter to open a file.

A list of commands with short descriptions can be viewed by
pressing ? inside the program and following the instructions.
The file code/keys.rb contains all keycombinations, so that's another
place you may want to check out.
More extensive documentation will be written when enough users ask me to :)


== Opening files with Ranger

If you use the same applications like me, you'll be able to open
files by pressing the right arrow key. If not, you will have to
specify them in ranger/defaults/apps.py. It's explained
in the docstrings how exactly to do that.

Once you've set up your applications, you can also use ranger to
open files from the shell:
    ranger blabla.pdf


== Guidelines for developers:

Tabs for indentation, spaces for tables and such

Use docstrings with pydoc in mind

Use syntax compatible to both python 2.6 and 3.1. If your feature depends
on 3.1, better display a message that indicates that when using 2.6 instead
of letting the program crash.

Version Numbering: X.Y.Z
* X: milestones
* Y: stable versions
* Z: experimental versions
